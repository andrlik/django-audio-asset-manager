# Generated by Django 4.0.5 on 2022-06-07 17:31

import django.db.models.deletion
import django.utils.timezone
import model_utils.fields
import rules.contrib.models
import taggit.managers
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0005_auto_20220424_2025'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Artist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('name', models.CharField(help_text='Name for artist', max_length=250)),
                ('owner', models.ForeignKey(help_text='User who owns this record.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
            bases=(rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='AssetSource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('name', models.CharField(help_text='Name for this source of assets. May be an artist if licensed directly or a service, e.g. Audiio.', max_length=100)),
                ('url', models.URLField(blank=True, help_text='URL for the source, if applicable.', null=True)),
                ('source_credit_text', models.CharField(blank=True, help_text='Additional credit information if required, e.g. / via Adobe Stock', max_length=50, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='LicenseType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('name', models.CharField(help_text='Name for the license.', max_length=250)),
                ('url', models.URLField(blank=True, help_text='URL for the license type, if applicable.', null=True)),
                ('include_license_in_credits', models.BooleanField(default=False, help_text='Do we need to include this license term in the credits?')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('title', models.CharField(help_text='Title of album or collection.', max_length=250)),
                ('album_artist', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='audio_asset_manager.artist')),
                ('owner', models.ForeignKey(help_text='User who owns this record.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
            bases=(rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='AudioAsset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('asset_type', models.CharField(choices=[('MU', 'Music'), ('SFX', 'SFX'), ('AD', 'Ad'), ('PR', 'Promo')], db_index=True, default='MU', help_text='Type of asset.', max_length=5)),
                ('title', models.CharField(help_text='The title or name of the asset.', max_length=250)),
                ('filename', models.CharField(blank=True, help_text='Original filename when added, if done via a scan.', max_length=250, null=True)),
                ('digest', models.CharField(blank=True, help_text='Original SHA1 digest of file, if originally added via a scan.', max_length=50, null=True)),
                ('explicit_credit_required', models.BooleanField(default=True, help_text='Is explicit per asset credit required or can attribution be grouped?')),
                ('credit_link', models.URLField(blank=True, help_text='URL to use when providing credit, if required.', null=True)),
                ('duration', models.PositiveIntegerField(default=0, help_text='Length of audio file in seconds.')),
                ('bpm', models.PositiveIntegerField(blank=True, help_text='BPM of the file, if applicable.', null=True)),
                ('loudness', models.FloatField(blank=True, help_text='Integrated LUFS of the file, if measured.', null=True)),
                ('artist', models.ForeignKey(blank=True, help_text='The artist to when crediting this asset.', null=True, on_delete=django.db.models.deletion.CASCADE, to='audio_asset_manager.artist')),
                ('collection', models.ForeignKey(blank=True, help_text='Collection or album this asset is from, if applicable.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='audio_asset_manager.collection')),
                ('owner', models.ForeignKey(help_text='User who owns this record.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('source', models.ForeignKey(blank=True, help_text='Source that licensed this asset to us, if applicable.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='audio_asset_manager.assetsource')),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'abstract': False,
            },
            bases=(rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.AddField(
            model_name='assetsource',
            name='license_type',
            field=models.ForeignKey(blank=True, help_text='Licensing this source uses.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='audio_asset_manager.licensetype'),
        ),
        migrations.AddField(
            model_name='assetsource',
            name='owner',
            field=models.ForeignKey(help_text='User who owns this record.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
    ]
